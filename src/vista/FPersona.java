/**
 * fecha de creacion: junio de 2018
 * nombre: FPersona
 * Su función mantenedor personas
 * entrada datos persona
 * salida null
 * @author: braulio valdes 
 */
package vista;

import controlador.ControladorArriendos;
import controlador.ControladorDireccion;
import controlador.ControladorEmail;
import controlador.ControladorPersona;
import controlador.ControladorPersonaDireccion;
import controlador.ControladorPersonaEmail;
import controlador.ControladorPersonaTelefono;
import controlador.ControladorTelefono;
import controlador.ControladorVentas;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashSet;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import modelo.Arriendos;
import modelo.Compras;
import modelo.Direccion;
import modelo.Email;
import modelo.PersonaDireccion;
import modelo.PersonaEmail;
import modelo.PersonaTelefono;
import modelo.Personas;
import modelo.Telefono;
import modelo.Ventas;

/**
 *
 * @author BRAULIOMARIANO
 */
public class FPersona extends javax.swing.JFrame {
    /**
     * Creates new form FCategoria
     */
    DefaultListModel modelD = new DefaultListModel();
    DefaultListModel modelT = new DefaultListModel();
    DefaultListModel modelE = new DefaultListModel();
    
    DefaultComboBoxModel comboPersona;
    DefaultComboBoxModel comboDireccion;
    DefaultComboBoxModel comboTelefono;
    DefaultComboBoxModel comboCorreo;
    
    int suEstado, diaContrato, mesContrato, yearContrato;
    int diaIncorporacion, mesIncorporacion, yearIncorporacion;
    int originalDireccion;
    int[] listaPersonaDireccion;
    int originalTelefono;
    int[] listaPersonaTelefono;
    int originalEmail;
    int[] listaPersonaEmail;
    int tipoPersona;
    Calendar cal = Calendar.getInstance();
    
    public FPersona() {
        initComponents();
        //this.setAlwaysOnTop(true);
        this.setLocationRelativeTo(null);
        txtEstado.setEditable(false);
        String fechaHoy = cal.get(Calendar.DATE)+"/"+cal.get(Calendar.MONTH)+"/"+cal.get(Calendar.YEAR);
        poblarFechaContrato();
        poblarFechaIncorporacion();
        poblarTipoPersona();
        limpiar();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnAgrega = new javax.swing.JButton();
        txtRut = new javax.swing.JTextField();
        btnBorrar = new javax.swing.JButton();
        btnCerrar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtDv = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtEstado = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        btnCerrar1 = new javax.swing.JButton();
        txtAMaterno = new javax.swing.JTextField();
        txtAPaterno = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListTelefono = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListDireccion = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListEmail = new javax.swing.JList<>();
        cmbPersona = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        cmbDiaIncorporacion = new javax.swing.JComboBox<>();
        cmbMesIncorporacion = new javax.swing.JComboBox<>();
        cmbYearIncorporacion = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        cmbDiaContrato = new javax.swing.JComboBox<>();
        cmbMesContrato = new javax.swing.JComboBox<>();
        cmbYearContrato = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        cmbTipo = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 0, 0));
        setLocation(new java.awt.Point(200, 20));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("< M A N T E N E D O R   P E R S O N A S >");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(191, 11, -1, -1));

        jLabel2.setText("RUT");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 58, -1, -1));

        btnAgrega.setText("Agrega");
        btnAgrega.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregaActionPerformed(evt);
            }
        });
        getContentPane().add(btnAgrega, new org.netbeans.lib.awtextra.AbsoluteConstraints(58, 501, -1, -1));

        txtRut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRutActionPerformed(evt);
            }
        });
        txtRut.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRutKeyPressed(evt);
            }
        });
        getContentPane().add(txtRut, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 75, 81, -1));

        btnBorrar.setText("Cambia Estado");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });
        getContentPane().add(btnBorrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(216, 501, -1, -1));

        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        getContentPane().add(btnCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 501, -1, -1));

        btnModificar.setText("Actualizar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        getContentPane().add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(131, 501, -1, -1));

        jLabel3.setText("Dirección");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 222, -1, -1));
        getContentPane().add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 133, 262, -1));

        txtDv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDvActionPerformed(evt);
            }
        });
        getContentPane().add(txtDv, new org.netbeans.lib.awtextra.AbsoluteConstraints(151, 75, 20, -1));

        jLabel4.setText("-");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(143, 78, -1, -1));

        jLabel5.setText("Busca");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(221, 58, -1, -1));

        jLabel6.setText("Nombre");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 113, -1, -1));

        jLabel7.setText("Teléfono");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 356, -1, -1));
        getContentPane().add(txtEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(394, 318, 177, -1));

        jLabel9.setText("Estado");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(394, 298, -1, -1));

        btnCerrar1.setText("Limpiar");
        btnCerrar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrar1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnCerrar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(329, 501, -1, -1));

        txtAMaterno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAMaternoActionPerformed(evt);
            }
        });
        getContentPane().add(txtAMaterno, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 184, 122, -1));
        getContentPane().add(txtAPaterno, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 184, 122, -1));

        jLabel10.setText("Apellido Paterno");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 164, -1, -1));

        jLabel11.setText("Apellido Materno");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 164, -1, -1));

        jListTelefono.setBackground(new java.awt.Color(204, 255, 204));
        jListTelefono.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListTelefonoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListTelefono);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 402, 161, 44));

        jListDireccion.setBackground(new java.awt.Color(204, 255, 204));
        jListDireccion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListDireccionMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jListDireccion);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 269, 319, 69));

        jListEmail.setBackground(new java.awt.Color(204, 255, 204));
        jListEmail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListEmailMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jListEmail);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 402, 311, 44));

        cmbPersona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPersonaActionPerformed(evt);
            }
        });
        getContentPane().add(cmbPersona, new org.netbeans.lib.awtextra.AbsoluteConstraints(221, 75, 350, -1));

        jLabel13.setText("Correo Electrónico");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 356, -1, -1));

        cmbDiaIncorporacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDiaIncorporacionActionPerformed(evt);
            }
        });
        getContentPane().add(cmbDiaIncorporacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(463, 242, -1, -1));

        cmbMesIncorporacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMesIncorporacionActionPerformed(evt);
            }
        });
        getContentPane().add(cmbMesIncorporacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(503, 242, -1, -1));

        cmbYearIncorporacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbYearIncorporacionActionPerformed(evt);
            }
        });
        getContentPane().add(cmbYearIncorporacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(543, 242, -1, -1));

        jLabel16.setText("/");
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(495, 245, -1, -1));

        jLabel17.setText("/");
        getContentPane().add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(535, 245, -1, -1));

        cmbDiaContrato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDiaContratoActionPerformed(evt);
            }
        });
        getContentPane().add(cmbDiaContrato, new org.netbeans.lib.awtextra.AbsoluteConstraints(463, 184, -1, -1));

        cmbMesContrato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMesContratoActionPerformed(evt);
            }
        });
        getContentPane().add(cmbMesContrato, new org.netbeans.lib.awtextra.AbsoluteConstraints(503, 184, -1, -1));

        cmbYearContrato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbYearContratoActionPerformed(evt);
            }
        });
        getContentPane().add(cmbYearContrato, new org.netbeans.lib.awtextra.AbsoluteConstraints(543, 184, -1, -1));

        jLabel18.setText("/");
        getContentPane().add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(495, 187, -1, -1));

        jLabel19.setText("/");
        getContentPane().add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(535, 187, -1, -1));

        jLabel14.setText("Fecha Contrato");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(463, 164, -1, -1));

        jLabel15.setText("Fecha Incorporacion");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(463, 222, -1, -1));

        cmbTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTipoActionPerformed(evt);
            }
        });
        getContentPane().add(cmbTipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(392, 133, 179, -1));

        jLabel20.setText("Categoria");
        getContentPane().add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(392, 113, -1, -1));

        txtDireccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDireccionActionPerformed(evt);
            }
        });
        getContentPane().add(txtDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 242, 319, -1));

        txtTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTelefonoActionPerformed(evt);
            }
        });
        getContentPane().add(txtTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(57, 376, 161, -1));

        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });
        getContentPane().add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 376, 311, -1));

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 0, 0));
        jLabel27.setText("*");
        getContentPane().add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 20, 10));

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(255, 0, 0));
        jLabel28.setText("*");
        getContentPane().add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, 20, 10));

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 0, 0));
        jLabel29.setText("*");
        getContentPane().add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 190, 20, 10));

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 0, 0));
        jLabel30.setText("*");
        getContentPane().add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 185, 20, -1));

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(255, 0, 0));
        jLabel31.setText("*");
        getContentPane().add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 250, 20, 10));

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(255, 0, 0));
        jLabel32.setText("*");
        getContentPane().add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 380, 20, 10));

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(255, 0, 0));
        jLabel33.setText("*");
        getContentPane().add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 380, 20, 10));

        pack();
    }// </editor-fold>//GEN-END:initComponents

           
    
    
    
    private void btnAgregaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregaActionPerformed
        // TODO add your handling code here:
        // aqui agrega distribuidores
        if(validaFechaContrato() & validaFechaIncorporacion()){
                 
            if (txtRut.getText().isEmpty() || txtDv.getText().isEmpty() || txtNombre.getText().isEmpty() 
                || txtAPaterno.getText().isEmpty() || txtAMaterno.getText().isEmpty() 
                || modelD.getSize()<1 || modelT.getSize()<1 || modelE.getSize()<1){
                    JOptionPane.showMessageDialog(null, "Debe ingresa todos los datos", "Error de Ingreso", 1);
            }else{
                if(esNumero(txtRut.getText())){
                    int id_persona_rut = Integer.parseInt(txtRut.getText());      
                    poblarDireccionTelefonoCorreo();
                    String dv = txtDv.getText();
                    String nombre = txtNombre.getText();
                    String aPaterno = txtAPaterno.getText();
                    String aMaterno = txtAMaterno.getText();
                    int direccion = modelD.size();
                    int telefono = modelT.size();
                    int correo = modelE.size();
                
                    if(txtEstado.getText().equals("VIGENTE")){
                        suEstado = 1;
                    }else{
                        if(txtEstado.getText().equals("ELIMINADO")){
                            suEstado = 0;
                        }else{
                            suEstado = 2;
                        }
                    }
                    ControladorPersona p = new ControladorPersona();
                    Personas persona = p.leer(id_persona_rut); //recupera objeto persona si lo encuentra
                    if (persona != null) {
                        JOptionPane.showMessageDialog(null, "Error!, RUT persona existente", "Error de Ingreso", 1);
                    }else{
                        Personas personaNueva = new Personas(id_persona_rut,dv,tipoPersona,nombre,aPaterno,aMaterno,
                                                direccion,telefono,correo,diaContrato,mesContrato,yearContrato,
                                                diaIncorporacion,mesIncorporacion,yearIncorporacion, 1);
                        if(p.agregar(personaNueva)){
                                //grabo direcciones, telefonos y correos de la persona
                                //a grabar registros en personadireccio, personatelefon,personacorreo 
                                String direccionDato, telefonoDato, emailDato;
                                //variables auxiliares para conteneder busqueda 
                                Direccion xDireccion;
                                Telefono xTelefono;
                                Email xEmail;
                                // para almacenar id
                                ControladorDireccion cDireccion = new ControladorDireccion();
                                Direccion direccionNueva;
                                ControladorPersonaDireccion cPersonaDireccion = new ControladorPersonaDireccion();
                                while(direccion>0){
                                    //graba direccion
                                    direccionDato=String.valueOf(modelD.get(direccion-1)).trim();
                                    direccionNueva = new Direccion(direccionDato);
                                    cDireccion.agregar(direccionNueva);
                                    //busca id direccion nueva
                                    xDireccion=cDireccion.leerXdireccion(direccionDato);
                                    //graba persona-direccion
                                    cPersonaDireccion.agregar(id_persona_rut,xDireccion.getId_direccion(),1);
                                    direccion--;
                                }
                                ControladorTelefono cTelefono = new ControladorTelefono();
                                Telefono telefonoNuevo;                            
                                ControladorPersonaTelefono cPersonaTelefono = new ControladorPersonaTelefono();                            
                                while(telefono>0){
                                    //graba telefono
                                    telefonoDato=String.valueOf(modelT.get(telefono-1)).trim();
                                    telefonoNuevo = new Telefono(telefonoDato);
                                    cTelefono.agregar(telefonoNuevo);
                                    //busca id telefono nuevo
                                    xTelefono=cTelefono.leerXtelefono(telefonoDato);
                                    //graba persona-telefono
                                    cPersonaTelefono.agregar(id_persona_rut,xTelefono.getId_telefono(),1);
                                    telefono--;
                                }
                                ControladorPersonaEmail cPersonaEmail = new ControladorPersonaEmail();
                                ControladorEmail cEmail = new ControladorEmail();
                                Email emailNuevo;                            
                                while(correo>0){
                                    //graba email
                                    emailDato=String.valueOf(modelE.get(correo-1)).trim();
                                    emailNuevo = new Email(emailDato);
                                    cEmail.agregar(emailNuevo);
                                    //busca id email nuevo
                                    xEmail=cEmail.leerXemail(emailDato);
                                    //graba persona-email
                                    cPersonaEmail.agregar(id_persona_rut,xEmail.getId_email(),1);
                                    correo--;
                                }
                            JOptionPane.showMessageDialog(null, "Persona creada exitosamente", "Ingreso Válido",1);    
                        }else{
                            JOptionPane.showMessageDialog(null, "Persona no fue creada", "Ingreso No Válido",1);
                    }
                }
        
                limpiar();
                }else{
                        JOptionPane.showMessageDialog(null, "RUT DEBE SER NUMERICO, revise la información", "",1);
                    }
                }
            }else{
            // fecha no válida
            JOptionPane.showMessageDialog(null, "Error!, Se ingresó fecha no válida", "",1);
        }   
    }//GEN-LAST:event_btnAgregaActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        // TODO add your handling code here:
                // aqui borrado de distribuidores
        
        if (suEstado > 0){
            //chequear que la persona no este vinculado a un arriendo vigente
            ControladorArriendos cA = new ControladorArriendos();
            ArrayList<Arriendos> arriendos;
            //
            String d = txtRut.getText().trim();
            if(esNumero(d)){
                int rut = Integer.parseInt(d);
                    arriendos = cA.leerPersonasEnArriendos(rut);
                    if(!arriendos.isEmpty() || arriendos!=null){
                        //se hallaron arriendos
                        int largo = arriendos.size();
                        boolean tieneArriendo=false;
                        //busca arriendo vigentes
                        while(largo>0){
                            if(arriendos.get(largo-1).getEstado()>0){
                                tieneArriendo=true;
                                break;
                            }
                            largo--;
                        }
                        if(!tieneArriendo){
                            suEstado = 0;
                            muestraEstado();
                        }else{
                            JOptionPane.showMessageDialog(null, "Atención!, Persona vinculado en Arriendo, no se puede eliminar", "",1);
                        }
                    }else{
                        suEstado = 0;
                        muestraEstado();
                    }               
            }else{
                JOptionPane.showMessageDialog(null, "Atención!, RUT Persona no válido", "",1);
                }       
        }else{
            suEstado = 1;
            muestraEstado();

        }               
    }//GEN-LAST:event_btnBorrarActionPerformed

    
    
    private void limpiar(){
        poblarPersonas();
        btnModificar.setEnabled(false);
        btnAgrega.setEnabled(false);
        btnBorrar.setEnabled(false);
        txtRut.setEditable(true);
        txtDv.setEditable(true);
        txtRut.setText("");      
        txtDv.setText("");
        txtNombre.setText("");
        txtRut.setEditable(true);
        txtNombre.setEnabled(false);
        txtAPaterno.setEnabled(false);
        txtAPaterno.setText("");
        txtAMaterno.setEnabled(false);
        txtAMaterno.setText("");
        modelD.clear();
        modelT.clear();
        modelE.clear();
        txtEstado.setText("");
        txtNombre.setEnabled(false);
        txtEstado.setEnabled(false);
        txtDireccion.setEnabled(false);
        txtTelefono.setEnabled(false);
        txtEmail.setEnabled(false);
        txtDireccion.setText("");
        txtTelefono.setText("");
        txtEmail.setText("");
        cmbDiaContrato.setEnabled(false);
        cmbMesContrato.setEnabled(false);
        cmbYearContrato.setEnabled(false);
        cmbDiaIncorporacion.setEnabled(false);
        cmbMesIncorporacion.setEnabled(false);
        cmbYearIncorporacion.setEnabled(false);
        jListDireccion.setEnabled(false);
        jListTelefono.setEnabled(false);
        jListEmail.setEnabled(false);
        cmbTipo.setEnabled(false);

        suEstado = 1;
    }
    

    private void poblarFechaContrato(){
       for(int d=1;d<32;d++){
            cmbDiaContrato.addItem(String.valueOf(d));
       }
       for(int m=1;m<13;m++){
            cmbMesContrato.addItem(String.valueOf(m));
       }
       int y = cal.get(Calendar.YEAR);
       for(int a=y;a>2000;a--){
            cmbYearContrato.addItem(String.valueOf(a));
       }
    }
    
    private void poblarFechaIncorporacion(){
       for(int d=1;d<32;d++){
            cmbDiaIncorporacion.addItem(String.valueOf(d));
       }
       for(int m=1;m<13;m++){
            cmbMesIncorporacion.addItem(String.valueOf(m));
       }
       int y = cal.get(Calendar.YEAR);
       for(int a=y;a>2000;a--){
            cmbYearIncorporacion.addItem(String.valueOf(a));
       }
    }
        
    private boolean validaFechaContrato(){
        int topeDiaMes=0;
            
        if(mesContrato==1 || mesContrato==3 || mesContrato==5 || mesContrato==7 
                || mesContrato ==8 || mesContrato==10 || mesContrato==12){
            topeDiaMes = 31;
        }
        if(mesContrato==2 || mesContrato==4 || mesContrato==6 || mesContrato==9 || mesContrato ==11){
            topeDiaMes = 30;
        }
        if((yearContrato%4==0) & mesContrato==2){
            topeDiaMes = 29;    
        }
        if(diaContrato>topeDiaMes){
            return false;
        }
        return true;
    }
    
    private boolean validaFechaIncorporacion(){
        int topeDiaMes=0;
            
        if(mesIncorporacion==1 || mesIncorporacion==3 || mesIncorporacion==5 || mesIncorporacion==7 
                || mesIncorporacion ==8 || mesIncorporacion==10 || mesIncorporacion==12){
            topeDiaMes = 31;
        }
        if(mesIncorporacion==2 || mesIncorporacion==4 || mesIncorporacion==6 || mesIncorporacion==9 || 
                      mesIncorporacion ==11){
            topeDiaMes = 30;
        }
        if((yearIncorporacion%4==0) & mesIncorporacion==2){
            topeDiaMes = 29;    
        }
        if(diaIncorporacion>topeDiaMes){
            return false;
        }
        return true;
    }
    
    
    
    
    private void poblarPersonas(){
        ControladorPersona cd = new ControladorPersona();
        ArrayList<Personas> persona = cd.consultarTodo();
        comboPersona = new DefaultComboBoxModel();
        String estado;
        for (Personas p : persona) {
            if(p.getEstado()==1){
                estado = "vigente"; 
            }else{
                if(p.getEstado()==2){
                    estado = "eliminado";
                }else{
                    estado = "bloqueado";
                }
            }  
            comboPersona.addElement(p.getNombre()+"("+p.getId_persona_rut()+")"+"["+estado+"]");
            cmbPersona.setModel(comboPersona);
        }
    }
    
    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        // TODO add your handling code here:
     
       dispose();
       
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        
        if (txtRut.getText().isEmpty() || txtDv.getText().isEmpty() || txtNombre.getText().isEmpty() 
                || txtAPaterno.getText().isEmpty() || txtAMaterno.getText().isEmpty()  
                 || modelD.getSize()<1 || modelT.getSize()<1 || modelE.getSize()<1){
            JOptionPane.showMessageDialog(null, "Debe ingresa todos los datos", "Error de Ingreso", 1);
        }else{
            if(esNumero(txtRut.getText())){   
                int rut = Integer.parseInt(txtRut.getText());
                String dv = txtDv.getText();
                String nombre = txtNombre.getText();
                String aPaterno = txtAPaterno.getText();
                String aMaterno = txtAMaterno.getText();
                int direccion = modelD.size();
                int telefono = modelT.size();
                int correo = modelE.size();
                int tipo = 1;
                ControladorPersona cP = new ControladorPersona();
                Personas persona = cP.leer(rut); //recupera objeto distribuidor si lo encuentra
                if(persona != null) {
                    //crea un registro para hacer la actualizacion
                    Personas personaModificada = new Personas(rut,dv,tipo,nombre,aPaterno,aMaterno,
                                            direccion,telefono,correo,diaContrato,mesContrato,yearContrato,
                                           diaIncorporacion,mesIncorporacion,yearIncorporacion, suEstado);
                    if(cP.modificar(personaModificada)){
                        JOptionPane.showMessageDialog(null, "Persona modificado exitosamente", "Ingreso Válido",1);
                    }else{
                        JOptionPane.showMessageDialog(null, "Persona no fue modificado", "Modificación No Válida",1);
                    }
                }
            }else{
                JOptionPane.showMessageDialog(null, "Rut inválido, debe ser número","",1);
            }
        }
        limpiar();
    }//GEN-LAST:event_btnModificarActionPerformed

    void muestraEstado(){
        if (suEstado==0){
            txtEstado.setText("ELIMINADO");
            txtEstado.setForeground(Color.red);
        }else{
            if(suEstado==1){
                txtEstado.setText("VIGENTE");
                txtEstado.setForeground(Color.blue);
            }else{
                txtEstado.setText("BLOQUEADO");
                txtEstado.setForeground(Color.red);
            }
        }    
    }
    
    private boolean esNumero(String dato){
        try{
            int cambio = Integer.parseInt(dato);
            return true;
        }catch(NumberFormatException ex){
            return false;
        }
    }
    
    private String modulo11(String rut){
        
        int largo=rut.length();
        int f = 2;
        int acumulador = 0;
        while(largo>0){
            largo--;
            int m = Integer.parseInt(rut.substring(largo,largo+1));
            acumulador = acumulador + (m*f);
            f = f + 1;
            if (f > 7){
                f = 2;
            }
        }
   
        acumulador = acumulador % 11;                
        acumulador = 11 - acumulador;
        if (acumulador == 10){
            return "0";
        }
        if (acumulador == 11){
            return "K";
        }
        return String.valueOf(acumulador);
    }
    
    
    
    private DefaultListModel modelListD(String direccion){
   
        int l = modelD.getSize();
        boolean existe = false;
        
        // controla que siempre haya una direccion seleccionada 
        
        while(l>0){
            if (modelD.get(l-1).equals(direccion)){
                existe = true;
                break;
            }
            l--;
        }
        if (existe){
            modelD.removeElement(direccion);
        }else{
            modelD.addElement(direccion);
        }       
        return modelD;
    }

    private DefaultListModel modelListT(String telefono){
   
        int l = modelT.getSize();
        boolean existe = false;
        
        // controla que siempre haya una telefono seleccionada 
        
        while(l>0){
            if (modelT.get(l-1).equals(telefono)){
                existe = true;
                break;
            }
            l--;
        }
        if (existe){
            modelT.removeElement(telefono);
        }else{
            modelT.addElement(telefono);
        }       
        return modelT;
    }
    

    private DefaultListModel modelListE(String email){
   
        int l = modelE.getSize();
        boolean existe = false;
        
        // controla que siempre haya una telefono seleccionada 
        
        while(l>0){
            if (modelE.get(l-1).equals(email)){
                existe = true;
                break;
            }
            l--;
        }
        if (existe){
            modelE.removeElement(email);
        }else{
            modelE.addElement(email);
        }       
        return modelE;
    }
    
    
    void poblarDireccionTelefonoCorreo(){
        
        int lDireccion = modelD.size();
        // estos vectores almacenas los id direcciones, telefonos y correos para
        // crear los registros de las tablas personas direccion, telefono y correo
        // sus largos dependen del tamaño de las listas que los contienen
        listaPersonaDireccion = new int[lDireccion];
        
        // almacenando direcciones
        while(lDireccion>0){
            String d = modelD.get(lDireccion-1).toString();
            int direccion = lDireccion; //Integer.parseInt(d.substring(d.indexOf("(") + 1, d.indexOf(")")));
            listaPersonaDireccion[lDireccion-1] = direccion;
            lDireccion--;
        }
        
        int lTelefono = modelT.size();

        listaPersonaTelefono = new int[lTelefono];
        
        // almacenando telefonos
        while(lTelefono>0){
            String t = modelT.get(lTelefono-1).toString();
            int telefono = lTelefono; //Integer.parseInt(t.substring(t.indexOf("(") + 1, t.indexOf(")")));
            listaPersonaTelefono[lTelefono-1] = telefono;
            lTelefono--;
        }
        
        int lEmail = modelE.size();

        listaPersonaEmail = new int[lEmail];
        
        // almacenando correo
        while(lEmail>0){
            String e = modelE.get(lEmail-1).toString();
            int email = lEmail;  //Integer.parseInt(e.substring(e.indexOf("(") + 1, e.indexOf(")")));
            listaPersonaEmail[lEmail-1] = email;
            lEmail--;
        }
        
    }
  
    private void poblarTipoPersona(){
        cmbTipo.addItem("Cliente");
        cmbTipo.addItem("Dependiente");
        cmbTipo.addItem("Cliente-Dependiente");
    }  
    
    
    
    
    private void txtRutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRutActionPerformed
        // TODO add your handling code here:
    
    }//GEN-LAST:event_txtRutActionPerformed

    private void txtRutKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRutKeyPressed
        // TODO add your handling code here:            
    }//GEN-LAST:event_txtRutKeyPressed

    private void txtDvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDvActionPerformed
        // TODO add your handling code here:
        if(esNumero(txtRut.getText())){
            String r = txtRut.getText();      
            String dvGenerado = modulo11(r);
            String dvIngresado = txtDv.getText();
            if (dvIngresado.equals(dvGenerado)){
                txtRut.setEditable(false);
                txtDv.setEditable(false);
                txtNombre.setEnabled(true);
                cmbDiaIncorporacion.setEnabled(true);
                cmbMesIncorporacion.setEnabled(true);
                cmbYearIncorporacion.setEnabled(true);
                txtAPaterno.setEnabled(true);
                txtAMaterno.setEnabled(true);
                cmbTipo.setEnabled(true);
                jListDireccion.setEnabled(true);
                jListTelefono.setEnabled(true);
                jListEmail.setEnabled(true);
                txtEstado.setEnabled(true);
                btnAgrega.setEnabled(true);
                txtEstado.setText("VIGENTE");
                txtEstado.setForeground(Color.blue);
                txtDireccion.setEnabled(true);
                txtTelefono.setEnabled(true);
                txtEmail.setEnabled(true);
            }else{
                JOptionPane.showMessageDialog(null, "Error!, RUT ingresado no es válido","",1);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Error!, RUT debe ser numérico","",1);
        }
    }//GEN-LAST:event_txtDvActionPerformed

    private void btnCerrar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrar1ActionPerformed
        // TODO add your handling code here:
        limpiar();
    }//GEN-LAST:event_btnCerrar1ActionPerformed

    private void cmbPersonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPersonaActionPerformed
        // TODO add your handling code here:
        btnAgrega.setEnabled(false);
        btnModificar.setEnabled(true);
        btnBorrar.setEnabled(true);
        String p = cmbPersona.getItemAt(cmbPersona.getSelectedIndex());
        try{
            String nombrePersona = p.substring(0,p.indexOf("("));
            txtNombre.setText(nombrePersona);
            String rutPersona = p.substring(p.indexOf("(") + 1, p.indexOf(")"));
            txtRut.setText(rutPersona);
            
            String str_estado = p.substring(p.indexOf("[") + 1, p.indexOf("]"));
            int estado;
            if(str_estado.equals("vigente")){
                estado = 1;
            }else{
                if(str_estado.equals("eliminado")){
                    estado = 0;
                }else{
                    estado = 2;
                }
            }
            if(estado == 1){
                    txtEstado.setForeground(Color.blue);
                    txtEstado.setText("VIGENTE");
                }else{
                    if(estado == 0){
                        txtEstado.setForeground(Color.red);
                        txtEstado.setText("ELIMINADO");
                    }else{
                        txtEstado.setForeground(Color.red);
                        txtEstado.setText("BLOQUEADO");
                    }
                }
            ControladorPersona cP = new ControladorPersona();
            Personas pSeleccionada = cP.leer(Integer.parseInt(rutPersona));
            //busca datos de persona seleccionada
            if (pSeleccionada!=null){
                modelD.clear();
                modelT.clear();
                modelE.clear();
                cmbTipo.setSelectedIndex(pSeleccionada.getTipo_persona());
                txtRut.setEditable(false);
                txtDv.setText(pSeleccionada.getDv_persona());
                txtDv.setEditable(false);
                txtNombre.setEnabled(true);
                txtAPaterno.setEnabled(true);
                txtAPaterno.setText(pSeleccionada.getApaterno());
                txtAMaterno.setEnabled(true);
                txtAMaterno.setText(pSeleccionada.getAmaterno());
                txtEstado.setEnabled(true);
                cmbTipo.setEnabled(true);
                originalDireccion=pSeleccionada.getDireccion();
                originalTelefono=pSeleccionada.getTelefono();
                originalEmail=pSeleccionada.getEmail();
                jListDireccion.setEnabled(true);
                jListTelefono.setEnabled(true);
                jListEmail.setEnabled(true);
                txtDireccion.setEnabled(true);
                txtTelefono.setEnabled(true);
                txtEmail.setEnabled(true);
                listaPersonaDireccion = new int[originalDireccion];
                listaPersonaTelefono = new int[originalTelefono];
                listaPersonaEmail = new int[originalEmail];
                // poblar direcciones    
                ControladorPersonaDireccion cpd = new ControladorPersonaDireccion();                
                String direccionEncontrada;
                ArrayList<PersonaDireccion> personaDireccion = cpd.consultarTodoXpersona(Integer.parseInt(txtRut.getText()));
                // ahora recupero id de la direcccion almacenada
                if(personaDireccion!=null){
                    for(int xa=0;xa<originalDireccion;xa++){
                        int id_direccion = personaDireccion.get(xa).getId_direccion();
                        ControladorDireccion cDireccion = new ControladorDireccion();
                        Direccion direccionPersona = cDireccion.leer(id_direccion);
                        if(direccionPersona!=null){
                            direccionEncontrada = direccionPersona.getDireccion()+
                                    "("+direccionPersona.getId_direccion()+")";
                            jListDireccion.setModel(modelListD(direccionEncontrada));
                        }else{
                            JOptionPane.showMessageDialog(null, "Direccion no hallada", "Error", 1);
                        } 
                    }
                }else{
                        JOptionPane.showMessageDialog(null, "Direccion no hallado", "Error", 1);
                }
                // poblar telefonos    
                ControladorPersonaTelefono cpt = new ControladorPersonaTelefono();                
                String telefonoEncontrado;
                ArrayList<PersonaTelefono> personaTelefono = cpt.consultarTodoxPersona(Integer.parseInt(txtRut.getText()));
                // ahora recupero id de la direcccion almacenada
                if(personaTelefono!=null){
                    for(int xa=0;xa<originalTelefono;xa++){
                        int id_telefono = personaTelefono.get(xa).getId_telefono();
                        ControladorTelefono cTelefono = new ControladorTelefono();
                        Telefono telefonoPersona = cTelefono.leer(id_telefono);
                        if(telefonoPersona!=null){
                            telefonoEncontrado = telefonoPersona.getTelefono()+
                                    "("+telefonoPersona.getId_telefono()+")";
                            jListTelefono.setModel(modelListT(telefonoEncontrado));
                        }else{
                            JOptionPane.showMessageDialog(null, "telefono no hallado", "Error", 1);
                        } 
                    }
                }else{
                        JOptionPane.showMessageDialog(null, "Telefono no hallado", "Error", 1);
                }       
                // poblar email    
                ControladorPersonaEmail cpe = new ControladorPersonaEmail();                
                String emailEncontrado;
                ArrayList<PersonaEmail> personaEmail = cpe.consultarTodoxPersona(Integer.parseInt(txtRut.getText()));
                // ahora recupero id de la direcccion almacenada
                if(personaEmail!=null){
                    for(int xa=0;xa<originalEmail;xa++){
                        int id_email = personaTelefono.get(xa).getId_telefono();
                        ControladorEmail cEmail = new ControladorEmail();
                        Email emailPersona = cEmail.leer(id_email);
                        if(emailPersona!=null){
                            emailEncontrado = emailPersona.getEmail()+
                                    "("+emailPersona.getId_email()+")";
                            jListEmail.setModel(modelListE(emailEncontrado));
                        }else{
                            JOptionPane.showMessageDialog(null, "email no hallado", "Error", 1);
                        } 
                    }
                }else{
                        JOptionPane.showMessageDialog(null, "email no hallado", "Error", 1);
                }
            }
        }catch(NullPointerException e){
            txtRut.setText("");
        }
    }//GEN-LAST:event_cmbPersonaActionPerformed

    private void cmbDiaIncorporacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDiaIncorporacionActionPerformed
        // TODO add your handling code here:

        diaIncorporacion = Integer.parseInt(cmbDiaIncorporacion.getItemAt(cmbDiaIncorporacion.getSelectedIndex()));

    }//GEN-LAST:event_cmbDiaIncorporacionActionPerformed

    private void cmbMesIncorporacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMesIncorporacionActionPerformed
        // TODO add your handling code here:

        mesIncorporacion = Integer.parseInt(cmbMesIncorporacion.getItemAt(cmbMesIncorporacion.getSelectedIndex()));

    }//GEN-LAST:event_cmbMesIncorporacionActionPerformed

    private void cmbYearIncorporacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbYearIncorporacionActionPerformed
        // TODO add your handling code here:

        yearIncorporacion = Integer.parseInt(cmbYearIncorporacion.getItemAt(cmbYearIncorporacion.getSelectedIndex()));

    }//GEN-LAST:event_cmbYearIncorporacionActionPerformed

    private void cmbDiaContratoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDiaContratoActionPerformed
        // TODO add your handling code here:
        diaContrato = Integer.parseInt(cmbDiaContrato.getItemAt(cmbDiaContrato.getSelectedIndex()));

    }//GEN-LAST:event_cmbDiaContratoActionPerformed

    private void cmbMesContratoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMesContratoActionPerformed
        // TODO add your handling code here:
        mesContrato = Integer.parseInt(cmbMesContrato.getItemAt(cmbMesContrato.getSelectedIndex()));

    }//GEN-LAST:event_cmbMesContratoActionPerformed

    private void cmbYearContratoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbYearContratoActionPerformed
        // TODO add your handling code here:
        yearContrato = Integer.parseInt(cmbYearContrato.getItemAt(cmbYearContrato.getSelectedIndex()));

    }//GEN-LAST:event_cmbYearContratoActionPerformed

    private void cmbTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTipoActionPerformed
        // TODO add your handling code here:
        
        tipoPersona = cmbTipo.getSelectedIndex();
        
        if (tipoPersona==0){
                cmbDiaContrato.setEnabled(false);
                cmbMesContrato.setEnabled(false);
                cmbYearContrato.setEnabled(false);
                cmbDiaIncorporacion.setEnabled(true);
                cmbMesIncorporacion.setEnabled(true);
                cmbYearIncorporacion.setEnabled(true);
        }
        if (tipoPersona==1){
                cmbDiaContrato.setEnabled(true);
                cmbMesContrato.setEnabled(true);
                cmbYearContrato.setEnabled(true);
                cmbDiaIncorporacion.setEnabled(false);
                cmbMesIncorporacion.setEnabled(false);
                cmbYearIncorporacion.setEnabled(false);
        }
        if (tipoPersona==2){
                cmbDiaContrato.setEnabled(true);
                cmbMesContrato.setEnabled(true);
                cmbYearContrato.setEnabled(true);
                cmbDiaIncorporacion.setEnabled(true);
                cmbMesIncorporacion.setEnabled(true);
                cmbYearIncorporacion.setEnabled(true);            
        }
    }//GEN-LAST:event_cmbTipoActionPerformed

    private void txtDireccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDireccionActionPerformed
        // TODO add your handling code here:
        
        try{
            String direccion = txtDireccion.getText();
                          
            jListDireccion.setModel(modelListD(direccion));
         
        }catch(Exception e){       
                JOptionPane.showMessageDialog(null, e+" recargar", "",1);
        }
        
    }//GEN-LAST:event_txtDireccionActionPerformed

    private void txtTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTelefonoActionPerformed
        // TODO add your handling code here:
        try{
            String telefono = txtTelefono.getText();
                          
            jListTelefono.setModel(modelListT(telefono));
         
        }catch(Exception e){       
                JOptionPane.showMessageDialog(null, e+" recargar", "",1);
        }

    }//GEN-LAST:event_txtTelefonoActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
        
        try{
            String email = txtEmail.getText();
                          
            jListEmail.setModel(modelListE(email));
         
        }catch(Exception e){       
                JOptionPane.showMessageDialog(null, e+" recargar", "",1);
        }
        
    }//GEN-LAST:event_txtEmailActionPerformed

    private void jListDireccionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListDireccionMouseClicked
        // TODO add your handling code here:
        
        
        String direccionBorrar=jListDireccion.getSelectedValue();
        //  
        if(direccionBorrar!=null){
            jListDireccion.setModel(modelListD(direccionBorrar));
        }

        
    }//GEN-LAST:event_jListDireccionMouseClicked

    private void jListTelefonoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListTelefonoMouseClicked
        // TODO add your handling code here:
        
        
        String telefonoBorrar=jListTelefono.getSelectedValue();
        //  
        if(telefonoBorrar!=null){
            jListTelefono.setModel(modelListT(telefonoBorrar));
        }

    }//GEN-LAST:event_jListTelefonoMouseClicked

    private void jListEmailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListEmailMouseClicked
        // TODO add your handling code here:
        
        
        String emailBorrar=jListEmail.getSelectedValue();
        //  
        if(emailBorrar!=null){
            jListEmail.setModel(modelListE(emailBorrar));
        }

    }//GEN-LAST:event_jListEmailMouseClicked

    private void txtAMaternoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAMaternoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAMaternoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FPersona.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FPersona().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgrega;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnCerrar1;
    private javax.swing.JButton btnModificar;
    private javax.swing.JComboBox<String> cmbDiaContrato;
    private javax.swing.JComboBox<String> cmbDiaIncorporacion;
    private javax.swing.JComboBox<String> cmbMesContrato;
    private javax.swing.JComboBox<String> cmbMesIncorporacion;
    private javax.swing.JComboBox<String> cmbPersona;
    private javax.swing.JComboBox<String> cmbTipo;
    private javax.swing.JComboBox<String> cmbYearContrato;
    private javax.swing.JComboBox<String> cmbYearIncorporacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jListDireccion;
    private javax.swing.JList<String> jListEmail;
    private javax.swing.JList<String> jListTelefono;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField txtAMaterno;
    private javax.swing.JTextField txtAPaterno;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtDv;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEstado;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtRut;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
}
